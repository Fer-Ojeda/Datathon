# -*- coding: utf-8 -*-
"""Maximizar.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DgLLIwnZJb9yL5ELctYeP_I0hXLDUaCy
"""

!pip install pulp

import pandas as pd
from pulp import LpProblem, LpVariable, LpMaximize, lpSum, LpBinary, LpStatus, value

# === 1. Cargar la base de datos ===
df = pd.read_csv('database.csv')

df.columns

# === 2. Limpiar y preparar ===

# Asegurar tipo num√©rico para montocobrado
df['montocobrado'] = pd.to_numeric(df['montocobrado'], errors='coerce')

# Quitar intentos con monto no cobrado
df = df[df['montocobrado'].notna()].copy()

# Crear √≠ndice √∫nico por intento
df = df.reset_index(drop=True)
df['var_id'] = df.index

# === 3. Crear el modelo ===
modelo = LpProblem("Maximizacion_Cobranza", LpMaximize)

# Variables binarias por intento
x = LpVariable.dicts("x", df['var_id'], cat=LpBinary)

# Funci√≥n objetivo: Maximizamos la suma de lo cobrado
modelo += lpSum(x[i] * df.loc[i, 'montocobrado'] for i in df['var_id']), "TotalCobrado"

# Restricci√≥n: una sola selecci√≥n por idcredito
for credito in df['idcredito'].unique():
    indices = df[df['idcredito'] == credito]['var_id']
    modelo += lpSum(x[i] for i in indices) <= 1, f"UnIntento_{credito}"

# === 4. Resolver ===
modelo.solve()

# === 5. Resultados ===
print(f"Estado del modelo: {LpStatus[modelo.status]}")
print(f"Total m√°ximo cobrado: ${value(modelo.objective):,.2f}")

# Guardar soluci√≥n
df['seleccionado'] = df['var_id'].apply(lambda i: x[i].varValue)
seleccion_optima = df[df['seleccionado'] == 1].copy()

# Opcional: exportar resultado
seleccion_optima.to_csv('solucion_maximizacion_cobranza.csv', index=False)
print("‚úÖ Resultado exportado como 'solucion_maximizacion_cobranza.csv'")

# Agrupar la soluci√≥n por emisora, banco y tipo de env√≠o
estrategia = seleccion_optima.groupby(['emisora', 'banco', 'tipoenvio']).agg(
    num_creditos=('idcredito', 'count'),
    total_cobrado=('montocobrado', 'sum'),
    monto_promedio=('montocobrado', 'mean')
).reset_index()

# Ordenar por total cobrado
estrategia = estrategia.sort_values(by='total_cobrado', ascending=False)

# Mostrar el top 5 de combinaciones m√°s efectivas
print("üéØ Estrategias ganadoras:")
print(estrategia.head(5))