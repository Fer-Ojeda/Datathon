# -*- coding: utf-8 -*-
"""Untitled19.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GBexcprf9d7-O1LIQ-k3cXSD3pvLl3xK
"""

import pandas as pd
import json
import os

cat_banco = pd.read_csv(os.path.join('CatBanco.csv'))
cat_emisora = pd.read_csv(os.path.join('CatEmisora2.csv'))
cat_respuesta = pd.read_csv(os.path.join('CatRespuestaBancos.csv'))
cobros = pd.read_csv(os.path.join('ListaCobro.csv'))
cobro_detalle1 = pd.read_csv(os.path.join('ListaCobroDetalle2023.csv'))
cobro_detalle2 = pd.read_csv(os.path.join('ListaCobroDetalle2024.csv'))
cobro_detalle3 = pd.read_csv(os.path.join('ListaCobroDetalle2025.csv'))
cobro_emisora = pd.read_csv(os.path.join('ListaCobroEmisora.csv'))
tabla_bancaria = pd.read_csv(os.path.join('tabla_bancaria2.csv'))
capital=pd.read_csv(os.path.join('Capital_Pagare_FechaAperturaCredito_2.csv'))

# Unir los detalles de cobro de todos los años
cobro_detalle = pd.concat([cobro_detalle1, cobro_detalle2, cobro_detalle3], ignore_index=True)

# Cargar archivo JSON de costos
with open(os.path.join('Bancos_Emisoras_Costos.json'), encoding='utf-8') as f:
    costos = json.load(f)

filas = []
for banco, data in costos.items():
    for tipo, info in data.items():
        if tipo != "Nota":
            if isinstance(info, list):
                for item in info:
                    filas.append({
                        "Banco": banco,
                        "Tipo": tipo,
                        "Código": item.get("Código"),
                        "Costo": item.get("Costo por registro exitoso")
                    })
            else:
                filas.append({
                    "Banco": banco,
                    "Tipo": tipo,
                    "Costo": info.get("Costo por registro exitoso", info.get("Costo por registro enviado")),
                    "idEmisora": info.get("id Emisora")
                })
costos_df = pd.DataFrame(filas)
costos_df

#Columnas de las bases de datos
print("cat banco : ", cat_banco.columns)
print("cat emisora :", cat_emisora.columns)
print("cat respuesta : ", cat_respuesta.columns)
print("cobros: ", cobros.columns)
print("cobro detalle : ", cobro_detalle.columns)
print("cobro emisora : ", cobro_emisora.columns)
print("tabla bancaria :", tabla_bancaria.columns)
print("capital : ", capital.columns)
print("costos : ", costos_df.columns)

def estandariza_columnas(df):
    return df.rename(columns=lambda x: x.strip().lower().replace(' ', '_'))

cat_banco = estandariza_columnas(cat_banco)
cat_emisora = estandariza_columnas(cat_emisora)
cat_respuesta = estandariza_columnas(cat_respuesta)
cobros = estandariza_columnas(cobros)
cobro_detalle = estandariza_columnas(cobro_detalle)
cobro_emisora = estandariza_columnas(cobro_emisora)
capital = estandariza_columnas(capital)
costos_df = estandariza_columnas(costos_df)

# Unifica claves de unión
cobro_detalle['idcredito'] = cobro_detalle['idcredito'].astype(str).str.strip()
capital['idcredito'] = capital['idcredito'].astype(str).str.strip()

df = cobro_detalle.merge(cobros, on=['idlistacobro', 'idbanco'], how='left')
df = df.merge(cobro_emisora, on='idlistacobro', how='left')
df = df.merge(cat_banco, on='idbanco', how='left')
df = df.merge(cat_emisora, on='idemisora', how='left')
df = df.merge(cat_respuesta, on='idrespuestabanco', how='left')
df = df.merge(capital, on='idcredito', how='left')
df = df.merge(costos_df, on='idemisora', how='left')

# Convertir campos a tipo numérico para limpieza
df['montocobrado'] = pd.to_numeric(df['montocobrado'], errors='coerce')
df['costo'] = pd.to_numeric(df['costo'], errors='coerce')

# 1. Número de intentos por crédito
df['num_intentos_credito'] = df.groupby('idcredito')['idcredito'].transform('count')

# 2. Hora del cobro
df['fechacobrobanco'] = pd.to_datetime(df['fechacobrobanco'], errors='coerce')
df['hora_cobro_banco'] = df['fechacobrobanco'].dt.hour

# 3. Tiempo de respuesta del banco (en minutos)
df['fecha_envio'] = pd.to_datetime(df['fechaenviocobro'], errors='coerce')
df['tiempo_respuesta_banco'] = (df['fechacobrobanco'] - df['fecha_envio']).dt.total_seconds() / 60

# 4. Acepta parcialidades (solo BBVA)
df['acepta_parcialidades'] = df['banco'].astype(str).str.upper().str.contains('BBVA')


# Vista de las columnas finales con las nuevas variables
columnas_agregadas = ['num_intentos_credito', 'hora_cobro_banco', 'tiempo_respuesta_banco', 'acepta_parcialidades', 'costo']
nuevas_columnas_df = df[columnas_agregadas].copy()

columnas_finales = [
    'idcredito', 'pagare', 'capital', 'fechaaperturacredito',
    'idbanco', 'nombre_x',        # nombre_x es del banco
    'idemisora', 'nombre_y',      # nombre_y es de la emisora
    'tipoenvio', 'descripcion',   # resultado del banco
    'montoexigible', 'montocobrar', 'montocobrado',
    'costo', 'tipo',              # del JSON de costos
    'num_intentos_credito',       # intentos por crédito
    'hora_cobro_banco',           # hora del cobro
    'tiempo_respuesta_banco',     # tiempo de respuesta en minutos
    'acepta_parcialidades'        # True solo para BBVA
]

print(df.columns.tolist())

columnas_finales = [
    'idcredito',
    'pagare',
    'capital',
    'fechaaperturacredito',
    'idbanco_x',            # <-- asegúrate que sí existe
    'nombre_x',             # banco
    'idemisora',
    'nombre_y',             # emisora
    'tipoenvio',
    'descripcion',
    'montoexigible',
    'montocobrar',
    'montocobrado',
    'costo',                # del JSON de costos
    'tipo',                 # tipo de cobro
    'num_intentos_credito',       # número de intentos por crédito
    'hora_cobro_banco',           # hora en que se cobra
    'tiempo_respuesta_banco',     # tiempo en minutos entre envío y respuesta
    'acepta_parcialidades'        # True si banco permite cobros parciales (solo BBVA)
]

[col for col in df.columns if 'banco' in col.lower()]

df_final = df[columnas_finales].copy()

df_final = df_final.rename(columns={
    'nombre_x': 'banco',
    'nombre_y': 'emisora',
    'descripcion': 'descripcion_banco'
})

df_final.columns

df_final.head()

df_final['hora_cobro_banco'].notna().sum()

df_final.to_csv('base_domiciliacion_completa.csv', index=False)

df_final.columns