# -*- coding: utf-8 -*-
"""Copia de Minimizar.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RPWSeS-dy_2NoZhdeTgcU387hap8vkrb
"""

!pip install pulp

!pip install ace-tools

import pandas as pd
import numpy as np
import json
import os
import re
import unicodedata # Para limpiar nombres de columnas
from datetime import datetime, timedelta
import io # Para leer strings como archivos
from pulp import LpProblem, LpVariable, LpMinimize, lpSum, LpBinary, LpStatus, value

df = pd.read_csv('base_datos.csv')
df.columns

df.head()

# Limpiar datos
# Asegurar que los campos numéricos lo sean
df['montocobrado'] = pd.to_numeric(df['montocobrado'], errors='coerce')
df['costo'] = pd.to_numeric(df['costo'], errors='coerce')

# Identificar registros inválidos
creditos_invalidos = df[(df['montocobrado'] > 0) & (~df['costo'].notna() | df['costo'].isin([np.inf, -np.inf]))]['idcredito'].unique()

# Filtrar registros válidos: cobraron > 0, y el costo es válido
df_validos = df[(df['montocobrado'] > 0) & df['costo'].notna() & ~df['costo'].isin([np.inf, -np.inf])].copy()

# Variables
df_validos = df_validos.reset_index(drop=True)
df_validos['var_id'] = df_validos.index

# Modelo
modelo = LpProblem("Minimizacion_Costos_Domiciliacion", LpMinimize)

# Variables binarias de decisión
x = LpVariable.dicts("x", df_validos['var_id'], cat=LpBinary)

# Función objetivo: minimizar el costo total
modelo += lpSum(x[i] * df_validos.loc[i, 'costo'] for i in df_validos['var_id']), "CostoTotal"

# Restricción: solo un intento por crédito
for credito in df_validos['idcredito'].unique():
    indices = df_validos[df_validos['idcredito'] == credito]['var_id']
    modelo += lpSum(x[i] for i in indices) == 1, f"UnEnvio_{credito}"

modelo.solve()

df_validos['seleccionado'] = df_validos['var_id'].apply(lambda i: x[i].varValue)
solucion_minima = df_validos[df_validos['seleccionado'] == 1].copy()

solucion_minima.to_csv('solucion_minimizacion_costos.csv', index=False)
print(f" Costo total mínimo: ${value(modelo.objective):,.2f}")
print(f" Créditos seleccionados: {len(solucion_minima)}")

estrategia = solucion_minima.groupby(['emisora', 'banco', 'tipoenvio']).agg(
    num_creditos=('idcredito', 'count'),
    costo_total=('costo', 'sum'),
    costo_promedio=('costo', 'mean')
).reset_index().sort_values(by='costo_promedio')

print("\n Estrategias más eficientes:")
#print(estrategia.head(5))

print(estrategia.reset_index(drop=True).head(5))